# For more information on how config files work, see the documentation for
# burton.Config

[DEFAULT]

# Remove this option to enable the config file. This option is only present for
# newly-created config files, to prevent users from accidentally runnin the
# default configuration
remove_this_option = None

native_language = "English"
log_filename = "None"

# The Python class responsible for version control operations. The currently
# implemented opions are vcs.NoOp and vcs.Perforce. Use vcs.NoOp when you don't
# want to use version control
vcs_class = "burton.vcs.Perforce"

# The extensions of the file to extract localizable strings. On Mac, these are
# the strings you'd pass into NSLocalizedString, and on Windows, these are the
# resource names in a RESX or RC file. These extensions are not regular
# expressions, and do not need to be prefixed with a ".".
extensions_to_parse = [ ]

# The files from which to extract a mapping from the strings returned from
# extensions_to_parse to native-language strings. On Mac, these will be
# Localizable.strings et. al., and on Windows, they will be the same files
# from extensions_to_parse. These are regular expressions, and need to be
# double-escaped.
mapping_files = [ ]

# The logging level. Options are "debug", "info", "warning", "error", and
# "critical". Messages from a lower level are not displayed.
logging_level = "info"

# A list of strings to exclude from localization. Adding strings to this list
# will prevent them from being extracted from resource files, but will not
# remove them from the translation files if they have already been translated.
strings_to_ignore_file = None

# The python class used for storing translations. Defaults to XLF. Don't change
# unless you have implemented a new Python class.
translation_files_class = "burton.translation.XLF"

# The directory to search for translation files
translation_files_dir = "FontManagement/Shared Code/Localization"

# A list of directories to search for resource files to localize.
paths_to_localize = []

# A dictionary of file extensions to the Python classes that implement
# operations to read and write these files. For non-translation files only.
parsers_by_extension = {
		"nib"     : "burton.parser.NIB",
		"lproj"   : "burton.parser.LPROJ",
		"strings" : "burton.parser.Strings",
		"resx"    : "burton.parser.RESX",
		"rc"      : "burton.parser.RC",
		"m"       : "burton.parser.MacSource",
		"mm"      : "burton.parser.MacSource",
		"h"       : "burton.parser.MacSource"
	}

# Paths to skip when searching for files. These are regular expressions, and
# must be double-escaped.
disallowed_paths = [
        "build",
        "ThirdParty",
        "third-party",
        "3rdParty",
        "release",
        "debug",
        "output",
        "lib",
        "ExtensisPluginFramework/test",
        "CoreFoundation",
        "French\\.lproj",
        "German\\.lproj",
        "Italian\\.lproj",
        "Japanese\\.lproj",
        "Portuguese\\.lproj",
        "Spanish\\.lproj",
        "core-client-dll",
        "testApp",
        "samplecode"
    ]

language_codes = {
        "English"    : "en",
        "French"     : "fr-FR",
        "German"     : "de-DE",
        "Italian"    : "it-IT",
        "Japanese"   : "jp-JP",
        "Portuguese" : "pt-PT",
        "Spanish"    : "es-ES"
    }

# A dictionary of languages to the translation files that hold translations for
# those languages.
files_by_language  = {
        "French"     : "French.xlf",
        "German"     : "German.xlf",
        "Italian"    : "Italian.xlf",
        "Japanese"   : "Japanese.xlf",
        "Portuguese" : "Portuguese.xlf",
        "Spanish"    : "Spanish.xlf"
    }

# Which languages to create localized resources for.
output_languages = [
        "French",
        "German",
        "Italian",
        "Japanese",
        "Portuguese",
        "Spanish"
    ]

# The Python class which implements the database operations for burton. Do not
# change this unless you've implemented a new Python class.
database_adaptor = "burton.database.sqlite"

# The path to save the database to. Note that this is a textual dump of the
# database, and not a database file itself.
database_path = "saved.sql"

[Mac]
extensions_to_parse = [ "nib", "m", "mm", "h" ]
mapping_files = [ "\\.strings$" ]
paths_to_localize = [ "FontManagement/Mac" ]
extensions_to_localize = [ "lproj" ]
localization_output_dir = "FontManagement/Mac/Resources"

[Win-DotNet]
extensions_to_parse = [ "resx", "rc" ]
mapping_files = [ "\\.resx$", "\\.rc$" ]
localization_output_dir = "None"
paths_to_localize = [
        "FontManagement/Shared Code/CoreAgent/utcore-prefpane/Win/utcore-prefpane-dll/res",
        "FontManagement/Shared Code/CoreAgent/utcore-prefpane/Win/control-panel-dll/res",
        "FontManagement/Win/Application/ViewLayer",
        "FontManagement/Win/CoreServices",
        "FontManagement/Win/ThinClient",
        "FontManagement/Win/Application/Properties",
        "FontManagement/Win/Application"
    ]
extensions_to_localize = [ "resx", "rc" ]

[Win-Win32]
extensions_to_parse = [ "rc" ]
mapping_files = [ "\\.rc$" ]
localization_output_dir = "None"
paths_to_localize = [
        "FontPlugins/Win/CrossPlugin/ExtensisPluginFramework",
        "FontPlugins/Win/Quark/Resources"
    ]
extensions_to_localize = [ "rc" ]
language_codes = {
        "English"    : "en",
        "French"     : "1036",
        "German"     : "1031",
        "Italian"    : "1040",
        "Japanese"   : "1041",
        "Portuguese" : "1046",
        "Spanish"    : "1034"
    }
